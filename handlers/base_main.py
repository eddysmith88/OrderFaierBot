from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.states import Form
from aiogram import exceptions

from datetime import date
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

import re
from handlers.bot_messages import info
from keyboards.inline import inline_keyboard, inline_court, inline_edit, start_admin
from handlers.admin_panel import admin_start

from utils.data_base import Count, ClientBase, OrderList
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

engine = create_engine('sqlite:///my_database.db')
Session = sessionmaker(bind=engine)
session = Session()

router = Router()


@router.message(Command('start'))
async def start(message: Message, state: FSMContext):
    await state.set_state(Form.select)

    await message.answer(f"–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n"
                         f"–ø—Ä–æ—Å—Ç–æ —Å–ª—ñ–¥—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º", reply_markup=inline_keyboard)
    if message.from_user.id == 887934499:
        await message.answer(f'–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å', reply_markup=start_admin)


@router.callback_query(lambda query: query.data == 'admin')
async def admin_callback(call: CallbackQuery):
    await admin_start(call.message)


@router.callback_query(lambda query: query.data == 'start')
async def start_menu(call: CallbackQuery, state: FSMContext):
    await start_choose(call.message, state)


async def start_choose(message: Message, state: FSMContext):
    await state.set_state(Form.select)
    order_lunch = session.query(Count).first().lunch
    order_soup = session.query(Count).first().soup
    buttons = []
    if order_lunch:
        buttons.append([InlineKeyboardButton(text='–û–±—ñ–¥ ü•ó', callback_data='–æ–±—ñ–¥')])
    if order_soup > 0:
        buttons.append([InlineKeyboardButton(text='–°—É–ø üç≤', callback_data='—Å—É–ø')])

    inline_order = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–©–æ –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏?", reply_markup=inline_order)


async def court(message: Message, state: FSMContext):
    """
    –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –∫–æ—à–∏–∫ –ø–æ–∫—É–ø–æ–∫
    :param message:
    :param state:
    :return:
    """
    await message.answer(f'–£ –∫–æ—à–∏–∫—É:  üõíüõíüõí\n{await show_court(state)}')
    await message.answer(f'–ó–∞–º–æ–≤–∏—Ç–∏ —â–µ –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏', reply_markup=inline_court)


async def show_court(state: FSMContext):
    """
    –ö–æ—à–∏–∫ –ø–æ–∫—É–ø–æ–∫
    :param state:
    :return:
    """
    data = await state.get_data()
    order_lunch = data.get('order_lunch')
    count_lunch = int(data.get('court_count_lunch', 0))
    order_soup = data.get('order_soup')
    count_soup = int(data.get('court_count_soup', 0))
    price_lunch = session.query(Count).first().price_lunch
    price_soup = session.query(Count).first().price_soup
    court_text = ""
    total_price = 0
    if order_lunch:
        total_lunch = count_lunch * price_lunch
        court_text += f"{order_lunch} - {count_lunch} x {price_lunch} = {total_lunch}\n"
        total_price += total_lunch
    if order_soup:
        total_soup = count_soup * price_soup
        court_text += f"{order_soup} - {count_soup} x {price_soup} = {total_soup}\n"
        total_price += total_soup
    return f'{court_text.strip()}\n\n–î–æ —Å–ø–ª–∞—Ç–∏: {total_price} –≥—Ä–Ω'


@router.callback_query(lambda query: query.data == 'edit_court')
async def edit_court(call: CallbackQuery):
    await call.message.answer('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–æ—à–∏–∫', reply_markup=inline_edit)


@router.callback_query(lambda query: query.data == 'minus_lunch')
async def minus_lunch(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    count_lunch = int(data.get('court_count_lunch', 0))
    if count_lunch > 0:
        new_count = count_lunch - 1
        await state.update_data(court_count_lunch=new_count)
    await court(call.message, state)


@router.callback_query(lambda query: query.data == 'minus_soup')
async def minus_lunch(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    count_soup = int(data.get('court_count_soup', 0))
    if count_soup > 0:
        new_count = count_soup - 1
        await state.update_data(court_count_soup=new_count)
    await court(call.message, state)


@router.callback_query(lambda query: query.data == 'back')
async def back(call: CallbackQuery, state: FSMContext):
    await court(call.message, state)


@router.callback_query(lambda query: query.data == 'next')
async def next_menu(call: CallbackQuery, state: FSMContext):
    await start_choose(call.message, state)


@router.callback_query(lambda query: query.data in ['–æ–±—ñ–¥', '—Å—É–ø'], Form.select)
async def choose_order(call: CallbackQuery, state: FSMContext):
    choice = call.data
    if choice not in ['–æ–±—ñ–¥', '—Å—É–ø']:
        await call.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–±–µ—Ä—ñ—Ç—å –æ–±—ñ–¥ –∞–±–æ —Å—É–ø.")
        return

    lunch_order = session.query(Count).first()
    if choice == '–æ–±—ñ–¥':
        if lunch_order.lunch <= 0:
            await call.message.answer("–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å –ª–∞–Ω—á—ñ. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –æ–±—ñ–¥.")
            return
        await state.update_data(order_lunch=choice)
        await state.set_state(Form.court_count_lunch)
        await call.message.answer(f'–í–∏ –æ–±—Ä–∞–ª–∏ ‚û°Ô∏è‚û°Ô∏è {choice.capitalize()}\n\n'
                                  f'–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —è–∫—É –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è')
    elif choice == '—Å—É–ø':
        if lunch_order.soup <= 0:
            await call.message.answer("–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å —Å—É–ø–∏. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –æ–±—ñ–¥.")
            return
        await state.update_data(order_soup=choice)
        await state.set_state(Form.court_count_soup)
        await call.message.answer(f'–í–∏ –æ–±—Ä–∞–ª–∏ ‚û°Ô∏è‚û°Ô∏è {choice.capitalize()}\n\n'
                                  f'–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —è–∫—É –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è')


@router.message(Form.court_count_lunch)
async def form_count_lunch(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        data = await state.get_data()
        lunch_order = session.query(Count).first()
        if count > lunch_order.lunch:
            await message.answer(f"–°—Ö–æ–∂–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.\n"
                                 f"–°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å \n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏èÔ∏è")
            return
        await state.update_data(court_count_lunch=message.text)

        user = message.from_user.id

        client = session.query(ClientBase).filter_by(user_id=user).first()

        if client is None:
            await state.set_state(Form.phone_number)
            await message.answer('–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É \n'
                                 '‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è')
        else:
            await court(message, state)
    except ValueError:
        await message.answer(f"–£–ø—Å—Å... –í–≤–æ–¥—å—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è")


@router.message(Form.court_count_soup)
async def form_count_soup(message: Message, state: FSMContext):
    try:
        count = int(message.text)
        data = await state.get_data()
        soup_order = session.query(Count).first()
        if count > soup_order.soup:
            await message.answer(f"–°—Ö–æ–∂–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ –±—ñ–ª—å—à–µ –Ω—ñ–∂ —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.\n"
                                 f"–°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å \n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏èÔ∏è")
            return
        await state.update_data(court_count_soup=message.text)

        user = message.from_user.id

        client = session.query(ClientBase).filter_by(user_id=user).first()

        if client is None:
            await state.set_state(Form.phone_number)
            await message.answer('–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ 0931122333\n'
                                 '‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è')
        else:
            await court(message, state)
    except ValueError:
        await message.answer(f"–£–ø—Å—Å... –í–≤–æ–¥—å—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è")


@router.message(Form.phone_number)
async def form_phone_number(message: Message, state: FSMContext):
    """
    –§–æ—Ä–º–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :param message: –û–±'—î–∫—Ç, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :param state: –û–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :return: None
    """
    phone_number = message.text.strip()
    data = await state.get_data()
    if not re.match(r'^0\d{9}$', phone_number):
        await message.answer('–ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–∏–π –Ω–æ–º–µ—Ä')
        return
    await state.update_data(phone_number=message.text)
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    user_name = message.from_user.username

    new_client = ClientBase(user_id=user_id, first_name=first_name, last_name=last_name, user_name=user_name,
                            phone=phone_number)

    session.add(new_client)
    session.commit()
    await court(message, state)


@router.callback_query(lambda query: query.data in ['comment', 'finish'])
async def handle_callback_query(call: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –§—É–Ω–∫—Ü—ñ—è, —â–æ –æ–±—Ä–æ–±–ª—è—î callback-–∑–∞–ø–∏—Ç–∏
    –†–æ–∑–≥–∞–ª—É–∂–µ–Ω–Ω—è: –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä —á–∏ –∑–∞–∫—ñ–Ω—á–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É
    :param call: –û–±'—î–∫—Ç, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :param state: –û–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :param bot:
    :return: None
    """
    data = await state.get_data()
    count_lunch = int(data.get('court_count_lunch', 0))
    count_soup = int(data.get('court_count_soup', 0))
    first_name = call.from_user.first_name
    last_name = call.from_user.last_name
    user_name = call.from_user.username
    current_date = date.today()
    formatted_date = current_date.strftime("%d.%m")
    create_test = OrderList(date=formatted_date, first_name=first_name, last_name=last_name, user_name=user_name, lunch=count_lunch,
                            soup=count_soup)
    session.add(create_test)
    session.commit()
    sum_count = count_soup + count_lunch
    if call.data == 'comment':
        if sum_count <= 0:
            await call.message.answer('–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ó—Ä–æ–±—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
            await court(call.message, state)
        else:
            await state.set_state(Form.add_comment)
            await call.message.answer(f'–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è')
    elif call.data == 'finish':
        if sum_count <= 0:
            await call.message.answer('–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ó—Ä–æ–±—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
            await court(call.message, state)
        else:
            await state.update_data(add_comment="")
            await finalize_order(call, state, bot, is_message=False)


@router.message(Form.add_comment)
async def comment_form(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(add_comment=message.text)
    await finalize_order(message, state, bot, is_message=True)


async def finalize_order(event, state: FSMContext, bot: Bot, is_message: bool):
    data = await state.get_data()
    await state.clear()
    await (event.message if not is_message else event).answer(f'–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ\nüòÉüòÉüòÉ')

    order_lunch = data.get('order_lunch')
    count_lunch = int(data.get('court_count_lunch', 0))
    order_soup = data.get('order_soup')
    count_soup = int(data.get('court_count_soup', 0))
    add_comment = data.get('add_comment', "")
    await (event.message if not is_message else event).answer(f'–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n'
                                                              f' {order_lunch if order_lunch else ""} '
                                                              f'{count_lunch if count_lunch else ""}\n'
                                                              f'{order_soup if order_soup else ""} '
                                                              f'{count_soup if count_soup else ""}\n'
                                                              f'\n\n–ß–µ–∫–∞—î–º–æ –í–∞—Å –ø—Ä–∏–±–ª–∏–∑–Ω–æ –æ 12:00')

    user_id = (event.from_user.id if not is_message else event.from_user.id)

    client_base = session.query(ClientBase).filter_by(user_id=user_id).first()
    phone = client_base.phone if client_base else "–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"
    user_id = client_base.user_id if client_base else "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ user_id"
    lunch_order = session.query(Count).first()
    if lunch_order:
        if order_lunch == '–æ–±—ñ–¥':
            lunch_order.lunch -= count_lunch
        if order_soup == '—Å—É–ø':
            lunch_order.soup -= count_soup
        session.commit()
    oder_table = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü—Ä–æ—Ñ—ñ–ª—å', url=f'tg://user?id={event.from_user.id}')],
        [InlineKeyboardButton(text='–¢–∞–±–ª–∏—Ü—è', callback_data='table')]
    ])
    await bot.send_message("@eddysmith_test", f'{event.from_user.full_name}\n\n'
                                              f'–ó–∞–º–æ–≤–∏–≤: {order_lunch if order_lunch else ""}: - {count_lunch if count_lunch else ""} —à—Ç\n'
                                              f'–ó–∞–º–æ–≤–∏–≤: {order_soup if order_soup else ""}: - {count_soup if count_soup else ""} —à—Ç \n\n'
                                              f'USER_ID {event.from_user.id}\n'
                                              f'–ó–∞–ª–∏—à–∏–ª–æ—Å—å –æ–±—ñ–¥—ñ–≤: {lunch_order.lunch if lunch_order else "N/A"}\n'
                                              f'–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å—É–ø—ñ–≤ {lunch_order.soup if lunch_order else "N/A"}\n\n'
                                              f'–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: \n\n{add_comment}',
                           reply_markup=oder_table)
    await info(event.message if not is_message else event)


@router.callback_query(lambda query: query.data == 'table')
async def get_table_callback(call: CallbackQuery, bot: Bot):
    """
    –ö–æ–ª–ª–±–µ–∫ –¥–ª—è –≤–∏–≤–æ–¥—É —Ç–∞–±–ª–∏—Ü—ñ –∑ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏
    :param call:
    :param bot:
    :return:
    """
    try:
        current_date = date.today()
        formatted_date = current_date.strftime("%d.%m")
        order_list = session.query(OrderList).filter(OrderList.date == formatted_date).all()

        message_text = ""
        for idx, order in enumerate(order_list, start=1):
            message_text += (f'{idx}. {order.first_name} {order.last_name} . {order.date}.  \n\n'
                             f'Lunch:    {order.lunch}      Soup:    {order.soup}  \n'
                             f'------------------------------------\n')

        await bot.send_message('@eddysmith_test', message_text)
    except exceptions.TelegramBadRequest as e:
        await bot.send_message('@eddysmith_test', '–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ–º–∞—î')

