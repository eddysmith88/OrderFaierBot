from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from utils.states import Form
import re
from handlers.bot_messages import info
from keyboards.inline import inline_keyboard, inline_order, inline_comment, inline_court

from utils.data_base import Count, ClientBase
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker


engine = create_engine('sqlite:///my_database.db')
Session = sessionmaker(bind=engine)
session = Session()


router = Router()


@router.callback_query(lambda query: query.data in ['–æ–±—ñ–¥', '—Å—É–ø'], Form.select)
async def choose_order(call: CallbackQuery, state: FSMContext):
    choice = call.data  # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    if choice not in ['–æ–±—ñ–¥', '—Å—É–ø']:
        await call.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–±–µ—Ä—ñ—Ç—å –æ–±—ñ–¥ –∞–±–æ —Å—É–ø.")
        return

    lunch_order = session.query(Count).first()
    if choice == '–æ–±—ñ–¥':
        if lunch_order.lunch <= 0:
            await call.message.answer("–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å –ª–∞–Ω—á—ñ. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –æ–±—ñ–¥.")
            return
        await state.update_data(order_lunch=choice)
        # await state.set_state(Form.order_lunch)
        await state.set_state(Form.court_count_lunch)
        await call.message.answer(f'–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —è–∫—É –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è')
    elif choice == '—Å—É–ø':
        if lunch_order.soup <= 0:
            await call.message.answer("–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å —Å—É–ø–∏. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –æ–±—ñ–¥.")
            return
        await state.update_data(order_soup=choice)
        # await state.set_state(Form.order_soup)
        await state.set_state(Form.court_count_soup)
        await call.message.answer(f'–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —è–∫—É –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è')
    await call.message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ ‚û°Ô∏è‚û°Ô∏è {choice}")
    # await state.set_state(Form.count)
    # await call.message.answer(f'–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —è–∫—É –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏\n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è')


@router.message(Form.court_count_lunch)
async def form_count_lunch(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    order_lunch = data.get('order_lunch')
    count_lunch = int(data.get('court_count_lunch', 0))
    if not message.text.isdigit():
        await message.answer('–¢—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏')
        return
    await state.update_data(court_count_lunch=message.text)
    await court(message, state)

    user = message.from_user.id

    client = session.query(ClientBase).filter_by(user_id=user).first()

    if client is None:
        await state.set_state(Form.phone_number)
        await message.answer('–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É \n'
                             '‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è')
    else:
        await message.answer('–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', reply_markup=inline_court)


@router.message(Form.court_count_soup)
async def form_count_soup(message: Message, state: FSMContext):
    data = await state.get_data()
    if not message.text.isdigit():
        await message.answer('–¢—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏')
        return
    await state.update_data(court_count_soup=message.text)
    await court(message, state)

    user = message.from_user.id

    client = session.query(ClientBase).filter_by(user_id=user).first()

    if client is None:
        await state.set_state(Form.phone_number)
        await message.answer('–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É \n'
                             '‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è')
    else:
        await message.answer('–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', reply_markup=inline_court)


async def court(event, state: FSMContext):
    data = await state.get_data()
    order_lunch = data.get('order_lunch')
    count_lunch = int(data.get('court_count_lunch', 0))
    order_soup = data.get('order_soup')
    count_soup = int(data.get('court_count_soup', 0))
    await event.message.answer(f'–£ –∫–æ—à–∏–∫—É: \n{order_lunch} - {count_lunch}\n{order_soup} - {count_soup}')
    await event.message.answer(f'–ó–∞–º–æ–≤–∏—Ç–∏ —â–µ –∞–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏', reply_markup=inline_court)


    # –æ—Ç–∫–∞—Ç
async def finalize_order(event, state: FSMContext, bot: Bot, is_message: bool):
    data = await state.get_data()
    await state.clear()
    await (event.message if not is_message else event).answer(f'–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ\nüòÉüòÉüòÉ')

    order = data.get('order')
    count = int(data.get('count', 0))
    add_comment = data.get('add_comment', "")
    await (event.message if not is_message else event).answer(f'–í—ñ—Ç–∞—é –≤–∏ –∑–∞–º–æ–≤–∏–ª–∏:\n‚û°Ô∏è‚û°Ô∏è {order}')

    user_id = (event.from_user.id if not is_message else event.from_user.id)

    client_base = session.query(ClientBase).filter_by(user_id=user_id).first()
    phone = client_base.phone if client_base else "–î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"
    user_id = client_base.user_id if client_base else "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ user_id"

    lunch_order = session.query(Count).first()
    if lunch_order:
        if order == '–æ–±—ñ–¥':
            lunch_order.lunch -= count
        elif order == '—Å—É–ø':
            lunch_order.soup -= count
        session.commit()

    await bot.send_message("@eddysmith_test", f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {event.from_user.full_name}\n\n'
                                              f'–ó–∞–º–æ–≤–∏–≤: {order}: - {count} —à—Ç \n\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n'
                                              f'–ó–∞–ª–∏—à–∏–ª–æ—Å—å –æ–±—ñ–¥—ñ–≤ {lunch_order.lunch if lunch_order else "N/A"}\n\n'
                                              f'–ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å—É–ø—ñ–≤ {lunch_order.soup if lunch_order else "N/A"}\n\n'
                                              f'–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä: \n\n{add_comment} ')
    await info(event.message if not is_message else event)