from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import Router, Bot
from filters.is_admin import IsAdmin
from keyboards.inline import inline_admin, channel_button
from utils.states import Form
from aiogram.fsm.context import FSMContext
from utils.data_base import Count
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

router = Router()

engine = create_engine('sqlite:///my_database.db')
Session = sessionmaker(bind=engine)
session = Session()


@router.message(Command('admin'), IsAdmin([887934499, 6706858065]))
async def admin_start(message: Message):
    """
    –§—É–Ω–∫—Ü—ñ—è, —â–æ –æ–±–æ—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /admin —ñ —Ä–æ–∑–ø–æ—á–∏–Ω–∞—î –¥—ñ—é –∑ –ø–∞–Ω–µ–ª–ª—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    :param message: –û–±'—î–∫—Ç, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    :return: None
    """
    await message.answer(f'–í—ñ—Ç–∞—é!\n–¶–µ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–û–±–µ—Ä–∏ –¥—ñ—é\n\nüîΩüîΩüîΩüîΩüîΩ', reply_markup=inline_admin)
    # count_data = Count(lunch=100, soup=50, price_lunch=10, price_soup=5)
    # session.add(count_data)
    # session.commit()


@router.callback_query(lambda query: query.data in ['add_lunch', 'remove_lunch', 'reset_lunch', 'add_soup',
                                                    'remove_soup', 'reset_soup', 'show_lunch', 'show_soup',
                                                    'price_lunch', 'price_soup'],
                       IsAdmin([887934499, 6706858065]))
async def admin_choose(call: CallbackQuery, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü—ñ—è, —â–æ –æ–±—Ä–æ–±–ª—è—î callback-–∑–∞–ø–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–∞ –≤–∏–±—ñ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –æ–ø—Ü—ñ–π
    :param call: –û–±'—î–∫—Ç, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î callback-–∑–∞–ø–∏—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :param state: –û–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :return:
    """
    choice = call.data
    if choice == 'add_lunch':
        await call.message.answer(f'–°–∫—ñ–ª—å–∫–∏ –¥–æ–¥–∞—Ç–∏ –æ–±—ñ–¥—ñ–≤?\nü•óüçùü•ßüçîüçï\nüîΩüîΩüîΩüîΩüîΩ')
        await state.set_state(Form.lunch_count)
    elif choice == 'remove_lunch':
        await call.message.answer(f'–°–∫—ñ–ª—å–∫–∏ –≤—ñ–¥–Ω—è—Ç–∏ –æ–±—ñ–¥—ñ–≤?\nü•óüçùü•ßüçîüçïnüîΩüîΩüîΩüîΩüîΩ')
        await state.set_state(Form.lunch_remove)
    elif choice == 'reset_lunch':
        await call.answer('–°–∫–∏–Ω—É—Ç–∏ –æ–±—ñ–¥–∏ –Ω–∞ 0')
        current_count_lunch = session.query(Count).first().lunch
        zero_count = current_count_lunch * 0
        session.query(Count).update({"lunch": zero_count})
        session.commit()
        await call.answer(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±—ñ–¥—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: {zero_count}\nü•óüçùü•ßüçîüçï')
        await admin_start(call.message)
    elif choice == 'reset_soup':
        await call.answer('–°–∫–∏–Ω—É—Ç–∏ —Å—É–ø–∏ –Ω–∞ 0')
        current_count_soup = session.query(Count).first().soup
        zero_count = current_count_soup * 0
        session.query(Count).update({"soup": zero_count})
        session.commit()
        await call.answer(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å c—É–ø—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: {zero_count}\nüç≤üç≤üç≤')
        await admin_start(call.message)
    elif choice == 'add_soup':
        await call.message.answer(f'–°–∫—ñ–ª—å–∫–∏ –¥–æ–¥–∞—Ç–∏ —Å—É–ø—ñ–≤?\nüç≤üç≤üç≤\nüîΩüîΩüîΩüîΩüîΩ')
        await state.set_state(Form.soup_count)
    elif choice == 'remove_soup':
        await call.message.answer(f'–°–∫—ñ–ª—å–∫–∏ –≤—ñ–¥–Ω—è—Ç–∏ —Å—É–ø—ñ–≤?\nüç≤üç≤üç≤\nüîΩüîΩüîΩüîΩüîΩ')
        await state.set_state(Form.soup_remove)
    elif choice == 'show_lunch':
        current_count_lunch = session.query(Count).first().lunch
        await call.message.answer(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±—ñ–¥—ñ–≤ {current_count_lunch}\nü•óüçùü•ßüçîüçï')
        await admin_start(call.message)
    elif choice == 'show_soup':
        current_count_soup = session.query(Count).first().soup
        await call.message.answer(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—É–ø—ñ–≤\nüç≤üç≤üç≤ {current_count_soup}')
        await admin_start(call.message)
    elif choice == 'price_lunch':
        await call.message.answer(f'–¶—ñ–Ω–∞ –Ω–∞ –æ–±—ñ–¥\nüç≤üç≤üç≤\nüîΩüîΩüîΩüîΩüîΩ')
        await state.set_state(Form.price_lunch)
    elif choice == 'price_soup':
        await call.message.answer(f'–¶—ñ–Ω–∞ –Ω–∞ –æ–±—ñ–¥\nüç≤üç≤üç≤\nüîΩüîΩüîΩüîΩüîΩ')
        await state.set_state(Form.price_soup)


@router.message(Form.price_lunch)
async def price_lunch(message: Message, state: FSMContext):
    """
    –§—É–Ω–∫—Ü—ñ—è, —â–æ –∑–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω price_lunch. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏
    :param message: –û–±'—î–∫—Ç, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :param state: –û–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :return: None
    """
    if not message.text.isdigit():
        await message.answer('–¢—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏')
        return
    current_price = session.query(Count).first().price_lunch
    new_price = current_price * 0 + int(message.text)

    session.query(Count).update({"price_lunch": new_price})
    session.commit()

    await state.update_data(price_lunch=new_price)
    await message.answer(f'–¶—ñ–Ω–∞ –æ–±—ñ–¥—É –æ–Ω–æ–≤–ª–µ–Ω–∞: {new_price}\nü•óüçùü•ßüçîüçï')
    await admin_start(message)


@router.message(Form.price_soup)
async def price_lunch(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü—ñ—è, —â–æ –∑–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω price_soup. –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ü—ñ–Ω–∏
    :param message: –û–±'—î–∫—Ç, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :param state: –û–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :return: None
    """
    if not message.text.isdigit():
        await message.answer('–¢—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏')
        return
    current_price = session.query(Count).first().price_soup
    new_price = current_price * 0 + int(message.text)

    session.query(Count).update({"price_soup": new_price})
    session.commit()

    await state.update_data(price_soup=new_price)
    await message.answer(f'–¶—ñ–Ω–∞ –æ–±—ñ–¥—É –æ–Ω–æ–≤–ª–µ–Ω–∞: {new_price}\nü•óüçùü•ßüçîüçï')
    await admin_start(message)


@router.callback_query(lambda query: query.data == 'today', IsAdmin([887934499, 6706858065]))
async def today_callback(call: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü—ñ—è, —â–æ –æ–±—Ä–æ–±–ª—è—î callback-–∑–∞–ø–∏—Ç –∑ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    :param call: –û–±'—î–∫—Ç, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :param state: –û–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :return: None
    """
    await call.message.answer(f'–©–æ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–∞ –æ–±—ñ–¥ \n‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è')
    await state.set_state(Form.menu_text)


@router.message(Form.menu_text)
async def menu(message: Message, state: FSMContext, bot: Bot):
    """
    –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∏–π–º–∞—î —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –Ω–∞ –∫–∞–Ω–∞–ª
    :param message: –û–±'—î–∫—Ç, —â–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :param state:
    :param bot:
    :return:
    """
    price_lunch = session.query(Count).first().price_lunch
    price_soup = session.query(Count).first().price_soup
    menu_text = message.text
    channel_id = -1001859713921
    channel_id_work = -1002048034204
    await bot.send_message(channel_id_work, f'–°—å–æ–≥–æ–¥–Ω—ñ –≤ –º–µ–Ω—é \n\n{menu_text}\n\n –¶—ñ–Ω–∞: {price_lunch} –≥—Ä–Ω',
                           reply_markup=channel_button)


@router.message(Form.lunch_remove)
async def lunch_remove(message: Message):
    if not message.text.isdigit():
        await message.answer('–¢—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏')
        return
    current_count = session.query(Count).first().lunch
    new_count = current_count - int(message.text)

    session.query(Count).update({"lunch": new_count})
    session.commit()

    await message.answer(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±—ñ–¥—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_count}\nü•óüçùü•ßüçîüçï')
    await admin_start(message)


@router.message(Form.lunch_count)
async def lunch_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–¢—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏')
        return
    current_count = session.query(Count).first().lunch
    new_count = current_count + int(message.text)

    session.query(Count).update({"lunch": new_count})
    session.commit()

    await state.update_data(lunch_count=new_count)
    await message.answer(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±—ñ–¥—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_count}\nü•óüçùü•ßüçîüçï')
    await admin_start(message)


@router.message(Form.soup_remove)
async def lunch_remove(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–¢—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏')
        return
    current_count_soup = session.query(Count).first().soup
    new_count_soup = current_count_soup - int(message.text)

    session.query(Count).update({"soup": new_count_soup})
    session.commit()

    await message.answer(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—É–ø—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_count_soup}\nüç≤üç≤üç≤')
    await admin_start(message)


@router.message(Form.soup_count)
async def lunch_count(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('–¢—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏')
        return

    current_count_soup = session.query(Count).first().soup
    new_count_soup = current_count_soup + int(message.text)

    session.query(Count).update({"soup": new_count_soup})
    session.commit()

    await state.update_data(soup_count=new_count_soup)
    await message.answer(f'–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—É–ø—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ: {new_count_soup}\nüç≤üç≤üç≤')
    await admin_start(message)
